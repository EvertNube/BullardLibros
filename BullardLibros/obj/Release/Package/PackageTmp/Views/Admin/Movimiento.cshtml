@using BullardLibros.Core.DTO
@model MovimientoDTO
@{
    ViewBag.Title = "NubeLabs SCI - Movimiento";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
@section Styles{
    @Styles.Render("~/Content/themes/admin/js/select2/select2.css")
    @Styles.Render("~/Content/themes/admin/js/select2/theme.css")
}

@section Scripts{
    @Scripts.Render("~/Content/themes/admin/js/select2/select2.min.js")
    <script type="text/javascript">
        @{
            var jss = new System.Web.Script.Serialization.JavaScriptSerializer();
            var userInfoJson = jss.Serialize(ViewBag.Categorias);
            var userInfoJson2 = jss.Serialize(ViewBag.Comprobantes);
        }
        var mydata = JSON.parse('@Html.Raw(userInfoJson)');
        var lstComps = JSON.parse('@Html.Raw(userInfoJson2)');

        $(document).ready(function () {
            $('.miselect2').select2();

            $('#IdCategoria').select2({
                placeholder: "Seleccione una categoría",
                data: mydata,
                allowClear: true
            })

            $('#IdComprobante').select2({ data: lstComps })

            ListarComprobantesEntidadXTipoDoc(0);
            //$('#IdEntidadResponsable').on('change', ListarComprobantesEntidadXTipoDoc(1))
            //$('#IdTipoDocumento').on('change', ListarComprobantesEntidadXTipoDoc(1))
            //$('#IdComprobante').on('change', BuscarCategoria)
            //$('#Monto').on('change', ActualizarMontoSinIGV);
        });

        function format(res) {
            var markup = null;
            if (res.children == null)
                markup = '<font color="#27ae60">' + res.text + '</font>';
            else
                markup = '<font color="black">' + res.text + '</font>';
            return markup;
        }

        function CheckNumericValue(e) {
            var key = e.which ? e.which : e.keyCode;
            if ((key >= 48 && key <= 57) || key == 13 || key == 8 || key == 9 || key == 27 || key == 46) {
                return true;
            }
            else {
                alert("Solo ingresar caracteres numericos");
                return false;
            }
        }

        function ModificarCombos() {
            if ($('#Nombre').val() == 'INGRESOS' || $('#Nombre').val() == 'ingresos') {
                $('#IdTipoMovimiento').prop('selectedIndex', 1);
                $('#IdEstadoMovimiento').prop('selectedIndex', 1);
            }
        }

        function ActualizarMontoSinIGV() {
            var montoSinIGV = ($('#Monto').val() / 1.18).toFixed(2);
            $('#MontoSinIGV').val(montoSinIGV);
        }

        function ListarComprobantesEntidadXTipoDoc(cambio) {
            if ($('#IdEntidadResponsable').val() != 0 && $('#IdTipoDocumento').val() != 0) {
                var identidad = parseInt($('#IdEntidadResponsable').val());
                var idtdoc = parseInt($('#IdTipoDocumento').val());
                //Se limpia el comprobante y la categoria si es que se cambia la entidad o el tipo de doc
                if (cambio == 1)
                {
                    $('#IdComprobante').select2("val", "");
                    $('#IdCategoria').select2("val", "");
                }

                GetComprobantesAjax(identidad, idtdoc);
                $('#IdComprobante').select2({
                    data: lstComps
                })
            }
        }

        function GetComprobantesAjax (identidad, idtdoc)
        {
            $.ajax({
                type: "POST",
                url: "/Admin/GetComprobantes",
                async: false,
                cache: false,
                data: { idEntidad: identidad, idTipoDoc: idtdoc },
                dataType: 'json',
                success: function (data) {
                    lstComps = data.listaComp;
                }
            });
        }

        function BuscarCategoria (sel)
        {
            var miIdComprobante = sel.value;
            $.ajax({
                type: "POST",
                url: "/Admin/BuscarComprobante",
                async: false,
                cache: false,
                data: { idComprobante: miIdComprobante },
                dataType: 'json',
                success: function (data) {
                    if(data.comprobante.IdCategoria != null){
                        $('#IdCategoria').select2("val", data.comprobante.IdCategoria);
                    } else {
                        $('#IdCategoria').select2("val", "");
                    }
                }
            });
        }


    </script>
}
<section class="vbox">
    <section class="scrollable padder">
        <div class="row m-b">
            <div class="col-xs-12 col-md-10 col-md-offset-1">
                @if (Model == null || Model.IdMovimiento == 0)
                {
                    <h2>Nuevo Movimiento</h2>
                }
                else
                {
                    <h2>Actualizar Movimiento</h2>
                }

                @using (Html.BeginForm("AddMovimiento", "Admin", FormMethod.Post))
                {
                    @Html.ValidationSummary(true)
                    <div class="row m-b">
                        <div class="col-xs-12 col-md-12">
                            @Html.Partial("_showAlertMessages")

                            <section class="panel panel-default">
                                @*<header class="panel-heading font-bold">Formulario de Registro</header>*@
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="form-group col-md-4">
                                            <label>Fecha</label>
                                            @Html.TextBoxFor(u => u.Fecha, "{0:dd/MM/yyyy}", new { @id = "Fecha", @class = "datepicker-input form-control", @placeholder = "Ingrese la fecha del movimiento", @type = "text", @data_provide = "datepicker", @readonly = "true" })
                                            @Html.ValidationMessageFor(u => u.Fecha)
                                        </div>
                                        <div class="form-group col-md-4">
                                            <label>Tipo de Movimiento</label>
                                            @Html.DropDownListFor(u => u.IdFormaMovimiento, new SelectList(ViewBag.lstFormaMovs, "IdFormaMovimiento", "Nombre", "NombreTipo", Model != null ? (Model.IdFormaMovimiento != null ? Model.IdFormaMovimiento : 0) : 0), new { @class = "col-xs-12 col-sm-12 col-md-12 no-padder miselect2" })
                                            @Html.ValidationMessageFor(u => u.IdFormaMovimiento)
                                        </div>
                                        <div class="form-group col-md-4">
                                            <label>Número de movimiento</label>
                                            @Html.TextBoxFor(u => u.NroOperacion, new { @class = "form-control", @placeholder = "Ingrese el nombre del movimiento", @type = "text", @onkeyup = "ModificarCombos()" })
                                            @Html.ValidationMessageFor(u => u.NroOperacion)
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="form-group col-md-6">
                                            <label>Monto</label>
                                            @Html.TextBoxFor(u => u.Monto, "{0:#.00}", new { @class = "form-control", @placeholder = "Ingrese el monto del movimiento", @type = "text", @onkeypress = "return CheckNumericValue(event)", @onkeyup = "ActualizarMontoSinIGV()" })
                                            @Html.ValidationMessageFor(u => u.Monto)
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Estado de Movimiento</label>
                                            @Html.DropDownListFor(u => u.IdEstadoMovimiento, new SelectList(ViewBag.EstadosMovimientos, "IdEstadoMovimiento", "Nombre", Model != null ? (Model.IdEstadoMovimiento != null ? Model.IdEstadoMovimiento : 0) : 0), new { @class = "form-control parsley-validated" })
                                            @Html.ValidationMessageFor(u => u.IdEstadoMovimiento)
                                        </div>
                                        @*<div class="form-group col-md-4">
                                            <label>Monto Sin IGV</label>
                                            @Html.TextBoxFor(u => u.MontoSinIGV, "{0:#.00}", new { @class = "form-control", @placeholder = "Monto Sin IGV", @type = "text", @readonly = "true" })
                                            @Html.ValidationMessageFor(u => u.MontoSinIGV)
                                        </div>*@
                                    </div>
                                    <div class="line line-dashed line-md pull-in"></div>
                                    <div class="row">
                                        <div class="form-group col-md-6">
                                            <label>Entidad</label>
                                            @Html.DropDownListFor(u => u.IdEntidadResponsable, new SelectList(ViewBag.EntidadesResponsables, "IdEntidadResponsable", "Nombre", "NombreTipoEntidad", Model != null ? (Model.IdEntidadResponsable != null ? Model.IdEntidadResponsable : 0) : 0), new { @class = "col-xs-12 col-sm-12 col-md-12 no-padder miselect2", @onchange = "ListarComprobantesEntidadXTipoDoc(1)" })
                                            @Html.ValidationMessageFor(u => u.IdEntidadResponsable)
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Tipo de Documento</label>
                                            @Html.DropDownListFor(u => u.IdTipoDocumento, new SelectList(ViewBag.lstTiposDeDocumento, "IdTipoDocumento", "Nombre", Model != null ? (Model.IdTipoDocumento != null ? Model.IdTipoDocumento : 0) : 0), new { @class = "form-control parsley-validated", @onchange = "ListarComprobantesEntidadXTipoDoc(1)" })
                                            @Html.ValidationMessageFor(u => u.IdTipoDocumento)
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="form-group col-md-6">
                                            <label>Nro Documento del Comprobante</label>
                                            @Html.TextBoxFor(u => u.IdComprobante, new { @class = "col-xs-12 col-sm-12 col-md-12 no-padder", @onchange = "BuscarCategoria(this)" })
                                            @Html.ValidationMessageFor(u => u.IdComprobante)
                                        </div>
                                        @*<div class="form-group col-md-4">
                                            <label>Numero de documento</label>
                                            @Html.TextBoxFor(u => u.NumeroDocumento, new { @class = "form-control", @placeholder = "Ingrese el numero del documento", @type = "text" })
                                            @Html.ValidationMessageFor(u => u.NumeroDocumento)
                                        </div>*@
                                        <div class="form-group col-md-6">
                                            <label>Categoría</label>
                                            @Html.TextBoxFor(u => u.IdCategoria, new { @class = "col-xs-12 col-sm-12 col-md-12 no-padder" })
                                            @Html.ValidationMessageFor(u => u.IdCategoria)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Comentario</label>
                                        @Html.TextAreaFor(u => u.Comentario, new { @class = "form-control", @placeholder = "Ingrese el comentario del movimiento", @type = "text", @cols = "3", @style = "resize:none;" })
                                        @Html.ValidationMessageFor(u => u.Comentario)
                                    </div>
                                    @if (ViewBag.EsAdmin && Model != null && Model.IdMovimiento > 0)
                                    {
                                        <div class="line line-dashed line-lg pull-in"></div>
                                        <div class="checkbox">
                                            <label>
                                                @Html.CheckBoxFor(u => u.Estado)
                                                Activo
                                            </label>
                                            @Html.ValidationMessageFor(u => u.Estado)
                                        </div>}
                                    else
                                    {
                                        @Html.TextBoxFor(u => u.Estado, new { @value = Model != null ? Model.Estado : false, @type = "hidden" })
                                    }
                                    @Html.TextBoxFor(u => u.IdMovimiento, new { @value = Model != null ? Model.IdMovimiento.ToString() : "", @type = "hidden" })
                                    @Html.TextBoxFor(u => u.IdCuentaBancaria, new { @value = Model != null ? Model.IdCuentaBancaria.ToString() : "", @type = "hidden" })
                                    @Html.TextBoxFor(u => u.UsuarioCreacion, new { @value = Model != null ? Model.UsuarioCreacion.ToString() : "", @type = "hidden" })
                                    @Html.TextBoxFor(u => u.FechaCreacion, new { @value = Model != null ? Model.FechaCreacion.ToString() : "", @type = "hidden" })
                                    @{var btnName = (Model != null && Model.IdMovimiento > 0) ? "Guardar Cambios" : "Crear";}
                                    <button type="submit" class="btn btn-sm btn-success">@btnName </button>
                                    <a class="btn btn-sm btn-danger" href="@Url.Action("Libro", new { id = Model.IdCuentaBancaria })">Salir</a>
                                </div>
                            </section>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>
</section>